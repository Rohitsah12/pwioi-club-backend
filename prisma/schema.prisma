generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Beacon {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  major     Int
  minor     Int
  room_id   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  room      Room     @relation(fields: [room_id], references: [id], onDelete: Cascade)
  scans     Scan[]

  @@index([room_id], map: "beacon_room_id_idx")
}

model Class {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  lecture_number String
  subject_id     String
  division_id    String
  teacher_id     String
  room_id        String
  start_date     DateTime
  end_date       DateTime
  googleEventId  String
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @default(now()) @map("updated_at")
  attendances    Attendance[]
  division       Division     @relation(fields: [division_id], references: [id], onDelete: Cascade)
  room           Room         @relation(fields: [room_id], references: [id], onDelete: Cascade)
  subject        Subject      @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  teacher        Teacher      @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  scans          Scan[]
  scanWindows    ScanWindow[]

  @@index([subject_id], map: "class_subject_id_idx")
  @@index([division_id], map: "class_division_id_idx")
  @@index([teacher_id], map: "class_teacher_id_idx")
  @@index([room_id], map: "class_room_id_idx")
}


model Scan {
  id                 String              @id @default(dbgenerated("gen_random_uuid()"))
  student_id         String
  class_id           String
  detected_beacon_id String
  rssi               Int                 @default(0)
  scan_window_id     String
  createdAt          DateTime            @default(now()) @map("created_at")
  updatedAt          DateTime            @default(now()) @map("updated_at")
  class              Class               @relation(fields: [class_id], references: [id], onDelete: Cascade)
  detectedBeacon     Beacon              @relation(fields: [detected_beacon_id], references: [id], onDelete: Cascade)
  scanWindow         ScanWindow          @relation(fields: [scan_window_id], references: [id], onDelete: Cascade)
  student            Student             @relation(fields: [student_id], references: [id], onDelete: Cascade)
  windowMappings     WindowScanMapping[]

  @@index([student_id], map: "scan_student_id_idx")
  @@index([class_id], map: "scan_class_id_idx")
  @@index([detected_beacon_id], map: "scan_beacon_id_idx")
  @@index([scan_window_id], map: "scan_window_id_idx")
}

model ScanWindow {
  id             String              @id @default(dbgenerated("gen_random_uuid()"))
  student_id     String
  class_id       String
  is_processed   Boolean
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @default(now()) @map("updated_at")
  scans          Scan[]
  class          Class               @relation(fields: [class_id], references: [id], onDelete: Cascade)
  student        Student             @relation(fields: [student_id], references: [id], onDelete: Cascade)
  windowMappings WindowScanMapping[]

  @@index([student_id], map: "scan_window_student_id_idx")
  @@index([class_id], map: "scan_window_class_id_idx")
}

model Attendance {
  id                    String             @id @default(dbgenerated("gen_random_uuid()"))
  student_id            String
  class_id              String
  status                AttendanceStatus
  successful_scan_count Int                @default(3)
  marked_by             AttendanceMarkedBy
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @default(now()) @map("updated_at")
  class                 Class              @relation(fields: [class_id], references: [id], onDelete: Cascade)
  student               Student            @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@unique([student_id, class_id], name: "attendance_student_class_unique")
  @@index([student_id], map: "attendance_student_id_idx")
  @@index([class_id], map: "attendance_class_id_idx")
}

model WindowScanMapping {
  id             String     @id @default(dbgenerated("gen_random_uuid()"))
  scan_window_id String
  scan_id        String
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @map("updated_at")
  scan           Scan       @relation(fields: [scan_id], references: [id], onDelete: Cascade)
  scanWindow     ScanWindow @relation(fields: [scan_window_id], references: [id], onDelete: Cascade)

  @@unique([scan_window_id, scan_id], name: "mapping_window_scan_unique")
  @@index([scan_window_id], map: "mapping_scan_window_id_idx")
  @@index([scan_id], map: "mapping_scan_id_idx")
}

model Room {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  center_id String   // Add this field
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  beacons   Beacon[]
  classes   Class[]
  center    Center   @relation(fields: [center_id], references: [id], onDelete: Cascade) // Add this relation

  @@index([center_id], map: "room_center_id_idx") // Add this index
}
model Problem {
  id                String             @id @default(cuid())
  title             String             @db.VarChar(200)
  problemStatement  String             @default("") @map("problem_statement")
  constraints       String             @default("")
  difficulty        Difficulty         @default(Easy)
  createdBy         String?            @map("created_by")
  isActive          Boolean            @default(true) @map("is_active")
  isPublic          Boolean            @default(false) @map("is_public")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  problemWeight     Int                @default(30)
  testcaseWeight    Int                @default(70)
  contestProblems   ContestProblem[]
  creator           Teacher?           @relation(fields: [createdBy], references: [id])
  problemLanguage   ProblemLanguage[]
  problemModerators ProblemModerator[]
  problemTags       ProblemTag[]
  submissions       Submission[]
  testCases         TestCase[]

  @@index([createdBy])
  @@index([difficulty])
  @@index([isActive])
  @@index([isPublic])
  @@index([title])
  @@map("problem")
}

model ProblemLanguage {
  id          String              @id @default(cuid())
  problemId   String              @map("problem_id")
  languageId  String              @map("language_id")
  prelude     String              @default("")
  boilerplate String              @default("")
  driverCode  String              @default("") @map("driver_code")
  createdAt   DateTime            @default(now()) @map("created_at")
  updatedAt   DateTime            @default(now()) @map("updated_at")
  language    ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)
  problem     Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([problemId, languageId])
  @@index([id])
  @@index([problemId, languageId])
  @@map("problem_language")
}

model ProblemTag {
  id        String   @id @default(cuid())
  problemId String   @map("problem_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([problemId, tagId])
  @@index([problemId])
  @@index([tagId])
  @@map("problem_tag")
}

model Tag {
  id          String       @id @default(cuid())
  name        String       @unique
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  contestTags ContestTag[]
  problemTags ProblemTag[]

  @@index([name])
  @@map("tag")
}

model ContestTag {
  id        String   @id @default(cuid())
  contestId String   @map("contest_id")
  tagId     String   @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([contestId, tagId])
  @@index([contestId])
  @@index([tagId])
  @@map("contest_tag")
}

model TestCase {
  id                String             @id @default(cuid())
  problemId         String             @map("problem_id")
  input             String             @db.VarChar(200)
  output            String             @map("expected_output") @db.VarChar(200)
  isSample          Boolean            @default(false) @map("is_sample")
  weight            Int                @default(1)
  explanation       String?
  submissionResults SubmissionResult[]
  problem           Problem            @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId])
  @@index([isSample])
  @@map("test_case")
}

model ProblemModerator {
  id          String   @id @default(cuid())
  problemId   String   @map("problem_id")
  moderatorId String   @map("moderator_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  moderator   Teacher  @relation(fields: [moderatorId], references: [id], onDelete: Cascade)
  problem     Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@index([problemId])
  @@index([moderatorId])
  @@map("problem_moderator")
}

model Contest {
  id                String             @id @default(cuid())
  title             String             @db.VarChar(200)
  description       String             @default("")
  startTime         DateTime           @default(now()) @map("start_time")
  endTime           DateTime           @default(now()) @map("end_time")
  createdBy         String             @map("created_by")
  isOpen            Boolean            @default(false) @map("is_open")
  isPublished       Boolean            @default(false) @map("is_published")//change
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  subjectId        String?            @map("subject_id")//change
  allowedLanguages  AllowedLanguage[]
  batchContests     BatchContest[]
  creator           Teacher            @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  contestModerators ContestModerator[]
  contestProblems   ContestProblem[]
  tags              ContestTag[]
  submissions       Submission[]
  subject          Subject?           @relation(fields: [subjectId], references: [id])//change

  @@index([createdBy])
  @@index([startTime])
  @@index([endTime])
  @@index([isOpen])
  @@index([title])
  @@map("contest")
}

model BatchContest {
  id        String   @id @default(cuid())
  batchId   String   @map("batch_id")
  contestId String   @map("contest_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  batch     Batch    @relation(fields: [batchId], references: [id], onDelete: Cascade)
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)

  @@index([batchId])
  @@index([contestId])
  @@map("batch_contest")
}

model ProgrammingLanguage {
  id               String            @id @default(cuid())
  name             String            @unique @db.VarChar(200)
  judge0Code       Int               @unique @map("judge0_code")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")
  allowedLanguages AllowedLanguage[]
  problemLanguage  ProblemLanguage[]
  submissions      Submission[]

  @@index([name])
  @@index([judge0Code])
  @@map("programming_language")
}

model AllowedLanguage {
  id         String              @id @default(cuid())
  languageId String              @map("language_id")
  contestId  String              @map("contest_id")
  createdAt  DateTime            @default(now()) @map("created_at")
  updatedAt  DateTime            @updatedAt @map("updated_at")
  contest    Contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  language   ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)

  @@index([languageId])
  @@index([contestId])
  @@map("allowed_language")
}

model ContestModerator {
  id          String   @id @default(cuid())
  contestId   String   @map("contest_id")
  moderatorId String   @map("moderator_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  contest     Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  moderator   Teacher  @relation(fields: [moderatorId], references: [id], onDelete: Cascade)

  @@unique([contestId, moderatorId])
  @@index([contestId])
  @@index([moderatorId])
  @@map("contest_moderator")
}

model ContestProblem {
  id        String   @id @default(cuid())
  contestId String   @map("contest_id")
  problemId String   @map("problem_id")
  point     Int      @default(1)//change
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  contest   Contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  problem   Problem  @relation(fields: [problemId], references: [id], onDelete: Cascade)

  @@unique([contestId, problemId])
  @@index([contestId])
  @@index([problemId])
  @@map("contest_problem")
}


model Submission {
  id                String              @id @default(cuid())
  studentId         String              @map("student_id")
  problemId         String              @map("problem_id")
  contestId         String?             @map("contest_id")
  languageId        String              @map("language_id")
  code              String              @default("")
  status            String
  executionTime     Float?              @map("execution_time")
  memoryUsed        Float?              @map("memory_used")
  submittedAt       DateTime            @default(now()) @map("submitted_at")
  score             Float?              @default(0) //change
  contest           Contest?            @relation(fields: [contestId], references: [id], onDelete: Cascade)
  language          ProgrammingLanguage @relation(fields: [languageId], references: [id], onDelete: Cascade)
  problem           Problem             @relation(fields: [problemId], references: [id], onDelete: Cascade)
  user              Student             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  submissionResults SubmissionResult[]

  @@index([studentId])
  @@index([problemId])
  @@index([contestId])
  @@index([languageId])
  @@index([submittedAt])
  @@map("submission")
}

model SubmissionResult {
  id            String     @id @default(cuid())
  submissionId  String     @map("submission_id")
  testCaseId    String     @map("test_case_id")
  status        String
  executionTime Float?     @map("execution_time")
  memoryUsed    Int?       @map("memory_used")
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  testCase      TestCase   @relation(fields: [testCaseId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@index([testCaseId])
  @@map("submission_result")
}

model Center {
  id            String     @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  location      String
  code          Int        @unique
  business_head String?
  academic_head String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  batches       Batch[]
  academicHead  Admin?     @relation("AcademicHead", fields: [academic_head], references: [id], onDelete: Cascade)
  businessHead  Admin?     @relation("BusinessHead", fields: [business_head], references: [id], onDelete: Cascade)
  cohorts       Cohort[]
  divisions     Division[]
  policies      Policy[]
  rooms         Room[]     
  schools       School[]
  students      Student[]
  teachers      Teacher[]
  clubs         Club[]

  @@index([business_head], map: "center_business_head_idx")
  @@index([academic_head], map: "center_academic_head_idx")
}

model RoleAdmin {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  role      RoleType @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  admins    Admin[]
}

model Admin {
  id                  String         @id @default(dbgenerated("gen_random_uuid()"))
  name                String
  email               String         @unique
  phone               String         @unique
  googleId            String?
  linkedin            String?
  role_id             String
  pwId                String?                  @unique
  designation         String?
  googleAccessToken   String?
  googleRefreshToken  String?
  googleTokenExpiry   DateTime?
  lastLoginAt         DateTime?
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @default(now()) @map("updated_at")
  role                RoleAdmin      @relation(fields: [role_id], references: [id], onDelete: Cascade)
  behaviours          Behaviour[]
  academicHeadCenters Center[]       @relation("AcademicHead")
  businessHeadCenters Center[]       @relation("BusinessHead")
  clubOfficials       ClubOfficial[]
}

model School {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  name           SchoolName
  center_id      String
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  batches        Batch[]
  divisions      Division[]
  center         Center          @relation(fields: [center_id], references: [id], onDelete: Cascade)
  students       Student[]
  teacherSchools TeacherSchool[]
  cohorts         Cohort[] 

  @@unique([center_id, name], map: "unique_school_name_per_center")
  @@index([center_id], map: "school_center_id_idx")
}

model TeacherCohort {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  teacher_id     String
  cohort_id      String
  specialisation String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  cohort         Cohort   @relation(fields: [cohort_id], references: [id], onDelete: Cascade)
  teacher        Teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id], map: "teacher_cohort_teacher_id_idx")
  @@index([cohort_id], map: "teacher_cohort_cohort_id_idx")
}

model TeacherSchool {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  teacher_id     String
  school_id      String
  specialisation String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  school         School   @relation(fields: [school_id], references: [id], onDelete: Cascade)
  teacher        Teacher  @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id], map: "teacher_school_teacher_id_idx")
  @@index([school_id], map: "teacher_school_school_id_idx")
}

model Student {
  id                 String             @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  email              String             @unique
  googleId           String?
  gender             Gender
  phone              String             @unique
  address            String?
  is_active          Boolean            @default(true)
  deactivatedAt      DateTime?
  firstLoggedIn      Boolean            @default(false)
  enrollment_id      String             @unique
  device_id          String?            @unique
  center_id          String
  school_id          String
  batch_id           String
  semester_id        String
  division_id        String
  cohort_id          String?
  degree_id          String?
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime           @default(now()) @map("created_at")
  updatedAt          DateTime           @default(now()) @map("updated_at")
  academicHistory    AcademicHistory?
  achievements       Achievement[]
  attendances        Attendance[]
  behaviours         Behaviour[]
  certifications     Certification[]
  clubs              Club[]             @relation("ClubLeader")
  clubCoreTeams      ClubCoreTeam[]
  personalDetail     PersonalDetail?
  placements         Placement[]
  projects           Project[]
  scans              Scan[]
  scanWindows        ScanWindow[]
  socialLinks        SocialLink[]
  batch              Batch              @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  center             Center             @relation(fields: [center_id], references: [id], onDelete: Cascade)
  cohort             Cohort?            @relation(fields: [cohort_id], references: [id], onDelete: Cascade)
  degree             ExternalDegree?    @relation(fields: [degree_id], references: [id], onDelete: Cascade)
  division           Division           @relation(fields: [division_id], references: [id], onDelete: Cascade)
  school             School             @relation(fields: [school_id], references: [id], onDelete: Cascade)
  semester           Semester           @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  examMarks          StudentExamMarks[]
  studentLogs        StudentLog[]
  submissions        Submission[]
}

model Behaviour {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  admin_id    String
  action      String
  student_id  String
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  admin       Admin    @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  student     Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([admin_id], map: "behaviour_admin_id_idx")
  @@index([student_id], map: "behaviour_student_id_idx")
}

model SocialLink {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id String
  platform   String
  link       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "social_link_student_id_idx")
}

model StudentLog {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id      String
  action          String
  old_data        Json?
  new_data        Json?
  changed_by      String
  changed_by_type String
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @map("updated_at")
  student         Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "student_log_student_id_idx")
}

model Project {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  student_id   String
  name         String
  description  String?
  technologies String?
  github_link  String?
  live_link    String?
  start_date   DateTime
  end_date     DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  student      Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "project_student_id_idx")
}

model Certification {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  student_id   String
  name         String
  organisation String
  start_date   DateTime
  end_date     DateTime?
  link         String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  student      Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "certification_student_id_idx")
}

model Education {
  id                              String                   @id @default(dbgenerated("gen_random_uuid()"))
  institution                     String
  degree                          String
  field_of_study                  String
  start_date                      DateTime
  end_date                        DateTime?
  grade                           Float?
  createdAt                       DateTime                 @default(now()) @map("created_at")
  updatedAt                       DateTime                 @default(now()) @map("updated_at")
  ugEducationHistory              AcademicHistory[]        @relation("UndergradEducation")
  xEducationHistory               AcademicHistory[]        @relation("XEducation")
  xiiEducationHistory             AcademicHistory[]        @relation("XIIEducation")
  teacherDoctoralEducationHistory TeacherAcademicHistory[] @relation("TeacherDoctoralEducation")
  teacherPgEducationHistory       TeacherAcademicHistory[] @relation("TeacherPostgradEducation")
  teacherUgEducationHistory       TeacherAcademicHistory[] @relation("TeacherUndergradEducation")
  teacherXEducationHistory        TeacherAcademicHistory[] @relation("TeacherXEducation")
  teacherXIIEducationHistory      TeacherAcademicHistory[] @relation("TeacherXIIEducation")
}

model TeacherAcademicHistory {
  id             String     @id @default(dbgenerated("gen_random_uuid()"))
  teacher_id     String     @unique
  x_education    String?
  xii_education  String?
  undergraduate  String?
  postgraduate   String?
  doctorate      String?
  createdAt      DateTime   @default(now()) @map("created_at")
  updatedAt      DateTime   @default(now()) @map("updated_at")
  doctoralDegree Education? @relation("TeacherDoctoralEducation", fields: [doctorate], references: [id], onDelete: Cascade)
  postgrad       Education? @relation("TeacherPostgradEducation", fields: [postgraduate], references: [id], onDelete: Cascade)
  teacher        Teacher    @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  undergrad      Education? @relation("TeacherUndergradEducation", fields: [undergraduate], references: [id], onDelete: Cascade)
  xEducation     Education? @relation("TeacherXEducation", fields: [x_education], references: [id], onDelete: Cascade)
  xiiEducation   Education? @relation("TeacherXIIEducation", fields: [xii_education], references: [id], onDelete: Cascade)

  @@index([x_education], map: "teacher_academic_history_x_edu_idx")
  @@index([xii_education], map: "teacher_academic_history_xii_edu_idx")
  @@index([undergraduate], map: "teacher_academic_history_ug_edu_idx")
  @@index([postgraduate], map: "teacher_academic_history_pg_edu_idx")
  @@index([doctorate], map: "teacher_academic_history_doc_edu_idx")
}

model AcademicHistory {
  id            String     @id @default(dbgenerated("gen_random_uuid()"))
  student_id    String     @unique
  x_education   String?
  xii_education String?
  undergraduate String?
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @default(now()) @map("updated_at")
  student       Student    @relation(fields: [student_id], references: [id], onDelete: Cascade)
  undergrad     Education? @relation("UndergradEducation", fields: [undergraduate], references: [id], onDelete: Cascade)
  xEducation    Education? @relation("XEducation", fields: [x_education], references: [id], onDelete: Cascade)
  xiiEducation  Education? @relation("XIIEducation", fields: [xii_education], references: [id], onDelete: Cascade)

  @@index([x_education], map: "academic_history_x_edu_idx")
  @@index([xii_education], map: "academic_history_xii_edu_idx")
  @@index([undergraduate], map: "academic_history_ug_edu_idx")
}

model Achievement {
  id           String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id   String
  title        String
  description  String?
  start_date   DateTime
  organisation String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  student      Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "achievement_student_id_idx")
}

model Cohort {
  id             String          @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  center_id      String
  school_id       String  
  start_date     DateTime
  end_date       DateTime?
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @default(now()) @map("updated_at")
  center         Center          @relation(fields: [center_id], references: [id], onDelete: Cascade)
  school          School          @relation(fields: [school_id], references: [id], onDelete: Cascade)
  students       Student[]
  teacherCohorts TeacherCohort[]

  @@index([center_id], map: "cohort_center_id_idx")
  @@index([school_id], map: "cohort_school_id_idx")
}

model Division {
  id               String    @id @default(dbgenerated("gen_random_uuid()"))
  code             String
  center_id        String
  school_id        String
  batch_id         String
  current_semester String?   @unique
  start_date       DateTime
  end_date         DateTime?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @map("updated_at")
  classes          Class[]
  batch            Batch     @relation(fields: [batch_id], references: [id], onDelete: Cascade)
  center           Center    @relation(fields: [center_id], references: [id], onDelete: Cascade)
  school           School    @relation(fields: [school_id], references: [id], onDelete: Cascade)
  students         Student[]

  // Fixed: Use the same relation name for both sides
  currentSemester  Semester? @relation("CurrentSemester", fields: [current_semester], references: [id], onDelete: Cascade)

  // This is the 1-to-many relation with a unique name
  semesters        Semester[] @relation("DivisionSemesters")

  @@index([batch_id], map: "division_batch_id_idx")
  @@index([current_semester], map: "division_semester_id_idx")
  @@index([center_id], map: "division_center_id_idx")
  @@index([school_id], map: "division_school_id_idx")
}


model PersonalDetail {
  id                     String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id             String   @unique
  personal_email         String   @unique
  fathers_name           String?
  mothers_name           String?
  fathers_contact_number String?
  mothers_contact_number String?
  fathers_occupation     String?
  mothers_occupation     String?
  createdAt              DateTime @default(now()) @map("created_at")
  updatedAt              DateTime @default(now()) @map("updated_at")
  student                Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "personal_detail_student_id_idx")
}

model Batch {
  id        String         @id @default(dbgenerated("gen_random_uuid()"))
  name      String         
  center_id String
  school_id String
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @default(now()) @map("updated_at")
  center    Center         @relation(fields: [center_id], references: [id], onDelete: Cascade)
  school    School         @relation(fields: [school_id], references: [id], onDelete: Cascade)
  divisions Division[]
  students  Student[]
  contests  BatchContest[]

  @@index([center_id], map: "batch_center_id_idx")
  @@index([school_id], map: "batch_school_id_idx")
}


model Semester {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  number      Int
  division_id String
  start_date  DateTime
  end_date    DateTime?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
  students    Student[]
  subjects    Subject[]

  // The many-to-one relation back to division
  division          Division @relation("DivisionSemesters", fields: [division_id], references: [id], onDelete: Cascade)

  // Fixed: Use the same relation name and add the missing opposite field
  divisionAsCurrent Division? @relation("CurrentSemester")

  @@index([division_id], map: "semester_division_id_idx")
}

model Mentor {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  email       String   @unique
  phone       String   @unique
  linkedin    String?
  designation String?
  company     String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
}

model Subject {
  id          String             @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  semester_id String
  credits     Int
  code        String            
  teacher_id  String
  createdAt   DateTime           @default(now()) @map("created_at")
  updatedAt   DateTime           @default(now()) @map("updated_at")
  classes     Class[]
  exams       Exam[]
  examMarks   StudentExamMarks[]
  semester    Semester           @relation(fields: [semester_id], references: [id], onDelete: Cascade)
  teacher     Teacher            @relation(fields: [teacher_id], references: [id], onDelete: Cascade)
  cprModules CprModule[]  
  contests     Contest[]               

  @@index([semester_id], map: "subject_semester_id_idx")
  @@index([teacher_id], map: "subject_teacher_id_idx")
}

model Exam {
  id            String             @id @default(dbgenerated("gen_random_uuid()"))
  name          String
  weightage     Float
  full_marks    Float
  passing_marks Float
  exam_type     ExamType
  exam_date     DateTime
  subject_id    String
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @default(now()) @map("updated_at")
  subject       Subject            @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  marks         StudentExamMarks[]

  @@index([subject_id], map: "exam_subject_id_idx")
}

model StudentExamMarks {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id     String
  subject_id     String
  exam_id        String
  marks_obtained Float
  is_present     Boolean  @default(true)
  remarks        String?
  graded_by      String
  graded_at      DateTime
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  exam           Exam     @relation(fields: [exam_id], references: [id], onDelete: Cascade)
  teacher        Teacher  @relation("GradedExams", fields: [graded_by], references: [id], onDelete: Cascade)
  student        Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)
  subject        Subject  @relation(fields: [subject_id], references: [id], onDelete: Cascade)

  @@unique([student_id, exam_id], name: "student_exam_unique")
  @@index([student_id], map: "exam_marks_student_id_idx")
  @@index([subject_id], map: "exam_marks_subject_id_idx")
  @@index([exam_id], map: "exam_marks_exam_id_idx")
  @@index([graded_by], map: "exam_marks_teacher_id_idx")
}

model TeacherExperience {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  title        String
  company_name String
  location     String?
  work_mode    WorkMode
  start_date   DateTime
  end_date     DateTime?
  description  String?
  teacher_id   String
  createdAt    DateTime? @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  teacher      Teacher   @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id], map: "teacher_experience_teacher_id_idx")
}

model Teacher {
  id                 String                  @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  email              String                  @unique
  phone              String                  @unique
  role               TeacherRole
  pwId               String?                  @unique
  googleId           String?
  linkedin           String?
  personal_mail      String?
  github_link        String?
  gender             Gender?
  center_id          String
  designation        String?
  
  supervising_teacher_id String? 
  
  googleAccessToken  String?
  googleRefreshToken String?
  googleTokenExpiry  DateTime?
  lastLoginAt        DateTime?
  createdAt          DateTime                @default(now()) @map("created_at")
  updatedAt          DateTime                @default(now()) @map("updated_at")
  about              String?
  
  classes            Class[]
  clubOfficials      ClubOfficial[]
  examMarks          StudentExamMarks[]      @relation("GradedExams")
  subjects           Subject[]
  center             Center                  @relation(fields: [center_id], references: [id], onDelete: Cascade)
  academicHistory    TeacherAcademicHistory?
  teacherCohorts     TeacherCohort[]
  teacherExperiences TeacherExperience[]
  researchPapers     TeacherResearchPaper[]
  teacherSchools     TeacherSchool[]
  contests           Contest[]
  contestModerations ContestModerator[]
  createdProblems    Problem[]
  problemModerations ProblemModerator[]
  
  supervisingTeacher Teacher?  @relation("TeacherAssistant", fields: [supervising_teacher_id], references: [id], onDelete: SetNull)
  assistantTeachers  Teacher[] @relation("TeacherAssistant")

  @@index([center_id], map: "teacher_center_id_idx")
  @@index([supervising_teacher_id], map: "teacher_supervising_teacher_idx")
}
model TeacherResearchPaper {
  id                String        @id @default(dbgenerated("gen_random_uuid()"))
  teacher_id        String
  research_paper_id String
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @default(now()) @map("updated_at")
  researchPaper     ResearchPaper @relation(fields: [research_paper_id], references: [id], onDelete: Cascade)
  teacher           Teacher       @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([teacher_id], map: "teacher_paper_teacher_id_idx")
  @@index([research_paper_id], map: "teacher_paper_paper_id_idx")
}

model ResearchPaper {
  id                    String                 @id @default(dbgenerated("gen_random_uuid()"))
  title                 String                 @db.VarChar(500)
  abstract              String?
  publication_date      DateTime?
  journal_name          String?
  doi                   String?                @unique
  url                   String?
  createdAt             DateTime?              @map("created_at")
  updatedAt             DateTime?              @map("updated_at")
  teacherResearchPapers TeacherResearchPaper[]
}

model Club {
  id            String         @id @default(dbgenerated("gen_random_uuid()"))
  category      String
  name          String
  description   String?
  leader_id     String
   center_id     String
  established   DateTime?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @default(now()) @map("updated_at")
  leader        Student        @relation("ClubLeader", fields: [leader_id], references: [id], onDelete: Cascade)
  center        Center         @relation(fields: [center_id], references: [id], onDelete: Cascade)
  coreTeams     ClubCoreTeam[]
  clubOfficials ClubOfficial[]

  @@index([leader_id], map: "club_leader_id_idx")
}

model ClubOfficial {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  club_id    String
  teacher_id String?
  admin_id   String?
  admin      Admin?   @relation(fields: [admin_id], references: [id], onDelete: Cascade)
  club       Club     @relation(fields: [club_id], references: [id], onDelete: Cascade)
  teacher    Teacher? @relation(fields: [teacher_id], references: [id], onDelete: Cascade)

  @@index([club_id], map: "club_official_club_id_idx")
  @@index([teacher_id], map: "club_official_teacher_id_idx")
  @@index([admin_id], map: "club_official_admin_id_idx")
}

model Event {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  organiser   String
  venue       String
  type        EventType
  start_date  DateTime
  end_date    DateTime?
  description String?
  is_visible  Boolean   @default(true)
  thumbnail   String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @map("updated_at")
}

model Policy {
  id             String   @id @default(dbgenerated("gen_random_uuid()"))
  name           String
  pdf_url        String
  effective_date DateTime
  center_id      String
  is_active      Boolean  @default(true)
  policy_version String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  center         Center   @relation(fields: [center_id], references: [id], onDelete: Cascade)

  @@index([center_id], map: "policy_center_id_idx")
}

model ExternalDegree {
  id             String    @id @default(dbgenerated("gen_random_uuid()"))
  college_name   String
  degree_name    String
  specialisation String?
  start_date     DateTime
  end_date       DateTime?
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")
  students       Student[]
}

model Job {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  title        String
  location     String
  jd_link      String?
  work_mode    WorkMode
  type         JobType
  company_name String
  vacancy      Int?
  eligibility  String?
  description  String?
  closing_date DateTime?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
}

model Placement {
  id           String    @id @default(dbgenerated("gen_random_uuid()"))
  student_id   String
  job_type     JobType
  work_mode    WorkMode
  role         String
  company_name String
  start_date   DateTime
  end_date     DateTime?
  description  String?
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @default(now()) @map("updated_at")
  student      Student   @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "placement_student_id_idx")
}

model Post {
  id          String      @id @default(dbgenerated("gen_random_uuid()"))
  content     String
  author_id   String
  author_type AuthorRole
  likes       Int         @default(0)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  comments    Comment[]
  flags       Flag[]
  media       PostMedia[]
}

model Flag {
  id          String   @id @default(dbgenerated("gen_random_uuid()"))
  post_id     String
  content     String
  flagged_by  String
  user_role   String
  is_verified Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  post        Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "flag_post_id_idx")
}

model Comment {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  post_id   String
  user_id   String
  user_role String
  content   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  post      Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "comment_post_id_idx")
}

model PostMedia {
  id            String   @id @default(dbgenerated("gen_random_uuid()"))
  type          String
  mime_type     String
  s3_key        String  @default("")
  thumbnail_url String?
  duration      String?
  post_id       String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @map("updated_at")
  post          Post     @relation(fields: [post_id], references: [id], onDelete: Cascade)

  @@index([post_id], map: "post_media_post_id_idx")
}

model ClubCoreTeam {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  student_id String
  club_id    String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")
  club       Club     @relation(fields: [club_id], references: [id], onDelete: Cascade)
  student    Student  @relation(fields: [student_id], references: [id], onDelete: Cascade)

  @@index([student_id], map: "core_team_student_id_idx")
  @@index([club_id], map: "core_team_club_id_idx")
}

enum CPRStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

model CprModule {
  id         String     @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  order      Int
  subject_id String

  subject    Subject    @relation(fields: [subject_id], references: [id], onDelete: Cascade)
  topics     CprTopic[]

  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @updatedAt @map("updated_at")

  @@unique([subject_id, order])
  @@index([subject_id])
}


model CprTopic {
  id         String        @id @default(dbgenerated("gen_random_uuid()"))
  name       String
  order      Int
  module_id  String

  module     CprModule     @relation(fields: [module_id], references: [id], onDelete: Cascade)
  subTopics  CprSubTopic[]

  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  @@unique([module_id, order])
  @@index([module_id])
}

model CprSubTopic {
  id                 String    @id @default(dbgenerated("gen_random_uuid()"))
  name               String
  order              Int
  topic_id           String
  lecture_number     Int       @default(1) // Changed from lecture_count

  // Tracking Fields
  status             CPRStatus @default(PENDING)
  planned_start_date DateTime?
  planned_end_date   DateTime?
  actual_start_date  DateTime?
  actual_end_date    DateTime?

  topic              CprTopic  @relation(fields: [topic_id], references: [id], onDelete: Cascade)

  createdAt          DateTime  @default(now()) @map("created_at")
  updatedAt          DateTime  @updatedAt @map("updated_at")

  @@unique([topic_id, order])
  @@index([topic_id])
}
model ChangeLog {
  id              String   @id @default(dbgenerated("gen_random_uuid()"))
  entity_name     String
  entity_id       String
  action          String
  changed_by      String
  changed_by_type String
  old_data        Json?
  new_data        Json?
  createdAt       DateTime @default(now()) @map("created_at")
}

enum AuthorRole {
  SUPER_ADMIN
  ADMIN
  OPS
  BATCHOPS
  TEACHER
  ASSISTANT_TEACHER
  STUDENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
}

enum AttendanceMarkedBy {
  SYSTEM
  MANUAL
}

enum Gender {
  MALE
  FEMALE
}

enum RoleType {
  ADMIN
  SUPER_ADMIN
  OPS
  BATCHOPS
}

enum ExamType {
  END_SEM
  PROJECT
  FORTNIGHTLY
  INTERNAL_ASSESSMENT
  MID_SEM
  QUIZ
  INTERVIEW
  CLASS_TEST
}

enum TeacherRole {
  TEACHER
  ASSISTANT_TEACHER
}

enum SchoolName {
  SOT
  SOM
  SOH
}

enum EventType {
  HACKATHON
  SEMINAR
  WORKSHOP
  ACTIVITY
  CLUB_EVENT
}

enum WorkMode {
  HYBRID
  ONSITE
  REMOTE
}

enum JobType {
  INTERNSHIP
  FULL_TIME
}

enum Difficulty {
  Easy
  Medium
  Hard
}
